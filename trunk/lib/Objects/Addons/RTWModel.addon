    // RTWModel::canBeDeleted() {{{

    /**
     * Retourne true si l'objet peut être détruit en base de donnees.
     * Un RTWColor ne doit pas etre lie a un RTWMaterial
     *
     * @access public
     * @return boolean
     */
    public function canBeDeleted() {
        try {
            parent::canBeDeleted();
            $pdtCol = $this->getRTWProductCollection();
            foreach ($pdtCol as $pdt) {
                if (!$pdt->isDeletable(false)) {
                    throw new Exception('');
                }
            }
        } catch (Exception $exc) {
            throw new Exception(_('This model can not be modified because it is already used in one or more orders'));
        }
        return true;
    }

    // }}}
    // RTWModel::getMaterialProperties() {{{

    /**
     * Retourne les proprietes RTWMaterial
     *
     * @access public
     * @return boolean
     */
    public function getMaterialProperties($onlyForNomenclature=false) {

        $return = array(
            'HeelReference' => _('Heel reference'),
            'Sole'          => _('Sole'),
            'Box'           => _('Box'),
            'HandBag'       => _('Hand bag'),
            'Material1'     => _('Material 1'),
            'Material2'     => _('Material 2'),
            'Accessory1'    => _('Accessory 1'),
            'Accessory2'    => _('Accessory 2'),
            'Lining'        => _('Lining'),
            'Insole'        => _('Insole'),
            'UnderSole'     => _('Under-sole'),
            'MediaPlanta'   => _('Media planta'),
            'Lagrima'       => _('Lagrima'),
            'HeelCovering'  => _('Heel covering'),
            'Selvedge'      => _('Selvedge'),
            'Bamboo'        => _('Bamboo'),
        );
        if (!$onlyForNomenclature) {
            $return['Thread1'] = _('Thread 1');
            $return['Thread2'] = _('Thread 2');
        }
        return $return;
    }
    // }}}
    // RTWModel::toString() {{{

    /**
     * Retourne le nom presse + style number du modele.
     *
     * @access public
     * @return string
     */
    function toString() {
        if (($pressName = $this->getPressName()) instanceof RTWPressName) {
            return $pressName->getName();
        }
        return '';
    }

    // }}}
    // RTWModel::getToStringAttribute() {{{

    /**
     * Retourne le nom presse + style number du modele.
     *
     * @access public
     * @return string
     */
    function getToStringAttribute() {
        return array('PressName');
    }

    // }}}
    // RTWModel::getLegalMentions() {{{

    /**
     *
     * @access public
     * @return void
     */
    public function getLegalMentions($asHtml = false)
    {
        $nl    = $asHtml ? '<br/>' : "\n";
        $lines = array();
        $upper = array();
        $mats  = array('Material1', 'Material2', 'Accessory1', 'Accessory2');
        foreach ($mats as $mat) {
            $getter = 'get' . $mat;
            if (($matObj = $this->$getter()) instanceof RTWMaterial) {
                $upper[] = '    - ' . $matObj->toStringForCustoms();
            }
        }
        if (count($upper)) {
            $lines[] = _('Upper') . ": $nl" . implode($nl, $upper);
        }
        $lines[] = ($heelCov = $this->getHeelCovering()) instanceof RTWMaterial ? 
            _('Heel covering') . ': ' . $heelCov->toStringForCustoms() : null;
        $lines[] = ($lining = $this->getLining()) instanceof RTWMaterial ? 
            _('Lining') . ': ' . $lining->toStringForCustoms() : null;
        $lines[] = ($sole = $this->getSole()) instanceof RTWMaterial ? 
            _('Sole') . ': ' . $sole->toStringForCustoms() : null;
        $lines = array_filter($lines);
        return implode($nl, $lines);
    }

    // }}}
