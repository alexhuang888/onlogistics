    // getDateAndAmountForOrder() {{{

    /**
     * Return the date, amount and actor of the payment for the given order as
     * a tuple array of three elements.
     *
     * @param Command The order
     *
     * @access public
     * @return array
     */
    public function getDateAndAmountForOrder($order, $amount = null)
    {
        // calculate date
        $event = $this->getPaymentEvent();
        if ($event == TermsOfPaymentItem::ORDER) {
            $date = $order->getCommandDate();
        } else {
            $date = $order->getWishedDate();
        }
        $delay = $this->getPaymentDelay();
        if ($delay > 0) {
            $ts   = DateTimeTools::MysqlDateToTimeStamp($date);
            $date = DateTimeTools::timeStampToMySQLDate(
                $ts + ($delay * DateTimeTools::ONE_DAY)
            ); 
        }
        $option = $this->getPaymentOption();
        if ($option == self::END_OF_MONTH) {
            $date = DateTimeTools::lastDayInMonth($date);
        } else if ($option == self::END_OF_NEXT_MONTH) {
            $date = DateTimeTools::lastDayInMonth($date, 1);
        }
        // calculate amount
        if ($amount === null) {
            $amount = $order->getTotalPriceTTC();
        }
        $percent = $this->getPercentOfTotal();
        if ($amount > 0 && $percent > 0 && $percent != 100) {
            $amount = round($amount * ($percent / 100), 2);
        }
        // if it's the last we need to adjust the amount
        $parent  = $this->getTermsOfPayment();
        $itemIds = $parent->getTermsOfPaymentItemCollectionIds();
        if ($this->getId() == array_pop($itemIds)) {
            $tmpAmount = 0;
            foreach ($itemIds as $id) {
                $item = Object::load('TermsOfPaymentItem', $id);
                list($d, $t, $s) = $item->getDateAndAmountForOrder($order);
                $tmpAmount += $t;
            }
            $tmpAmount += $amount;
            if ($tmpAmount != $amount) {
                $toAdd  = $amount - $tmpAmount;
                $amount = $amount + $toAdd;
            }
        }
        // find actor
        if (!(($supplier = $this->getSupplier()) instanceof Supplier)) {
            $supplier = $order->getSupplierCustomer()->getSupplier();
        }
        // return date and amount in an array
        return array($date, $amount, $supplier);
    }

    // }}}
