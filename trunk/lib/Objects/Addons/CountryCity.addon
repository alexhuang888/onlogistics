
    /**
     *
     * @access public
     * @return void
     **/
    function toString(){
        $city = $this->getCityName();
        $country = $this->getCountry();
        $zip = $this->getZip();
        $cityname = false!=$city?$city->getName():'';
        $countryname = false!=$country?$country->getName():'';
        $zipcode = false!=$zip?$zip->getCode():'';
        return sprintf("%s %s (%s)", $zipcode, $cityname, $countryname);
    }

    /**
     * Retourne le nom des attributs représentant l'objet, pointés par toString()
     *
     * @static
     * @return array of strings
     * @access public
     */
    public function getToStringAttribute() {
        return array('CityName', 'Country', 'Zip');
    }

    /**
     * Retourne la requête appropriée pour la méthode getCSVData() du
     * serveur rpc.
     *
     * @access public
     * @static
     * @return string
     **/
    function getCSVDataSQL() {
        $sql  = 'SELECT ctc._Id as id, zip._Code as code, ';
        $sql .= 'ctn._Name as name, cty._Name as countryname ';
        $sql .= 'FROM CountryCity ctc, CityName ctn, Zip zip, Country cty ';
        $sql .= 'WHERE ctn._Id=ctc._CityName AND zip._Id=ctc._Zip ';
        $sql .= 'AND cty._Id=ctc._Country';
        return $sql;
    }

    /**
     * Retourne true s'il n'existe déjà une CountryCity
     * avec le meme triplet (Country, CityName.Name, Zip.Code)
     * ou une string s'il existe déjà une ou des CountryCity ayant le meme couple
     * (Country, CityName.Name)
     * ou false sinon
     * @access public
     * @return boolean or string
     **/
    function alreadyExistInCountry($name, $zipCode) {
        $errorMsg = '';
        $filterComponentArray = array(); // Tableau de filtres
        $filterComponentArray[] = SearchTools::NewFilterComponent('Id', '', 'NotEquals', $this->getId(), 1);
        $filterComponentArray[] = SearchTools::NewFilterComponent('Country', '', 'Equals', $this->getCountryId(), 1);
        $filterComponentArray[] = SearchTools::NewFilterComponent('Name', 'CityName.Name', 'Equals', $name, 1);
        $Filter = SearchTools::FilterAssembler($filterComponentArray); //  Création du filtre complet

        $mapper = Mapper::singleton(get_class($this));
        $CountryCityCollection = $mapper->loadCollection($Filter);

        if (!Tools::isEmptyObject($CountryCityCollection)) {
            $count = $CountryCityCollection->getCount();
            for($i = 0; $i < $count; $i++) {
                $CountryCity = $CountryCityCollection->getItem($i);
                // Si le zipCode est aussi identique, on sort
                $code = Tools::getValueFromMacro($CountryCity, '%Zip.Code%');
                if ($zipCode == $code) {
                    return true;
                }
                $errorMsg .= '<li>' . $name . ' / ' . $code . '</li>';
                unset($CountryCity, $code);
            }
        }
        return ($errorMsg == '')?false:$errorMsg;
    }

    /**
     * Sauve aussi les Zip et CityName si necessaire
     * A appeler dans une transaction
     * @param array $datas : donnees a sauver
     * @access public
     * @return void
     **/
    function saveAll($datas) {
        // Si le ZipCode est saisi, et n'existe pas, on cree un Zip
        $ZipMapper = Mapper::singleton('Zip');
        if ($datas['ZipCode'] != '') {
            $Zip = $ZipMapper->load(array('Code' => $datas['ZipCode']));
            if (Tools::isEmptyObject($Zip)) {
                $Zip = Object::load('Zip');
                $Zip->setCode($datas['ZipCode']);
                $Zip->save();
            }
            $this->setZip($Zip);
        }

        // Le CityName
        $CityNameMapper = Mapper::singleton('CityName');
        $CityName = $CityNameMapper->load(
                            array('Name' => $datas['Name'],
                                  'Department' => $datas['Department']));
        if (Tools::isEmptyObject($CityName)) {
            $CityName = Object::load('CityName');
            $CityName->setName($datas['Name']);
            $CityName->setDepartment($datas['Department']);
            $CityName->save();
        }
        $this->setCityName($CityName);

        // Le CountryCity
        $this->save();
    }
