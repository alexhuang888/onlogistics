    // Document::getData() {{{

    /**
     * Override getData() to handle the new way of storing PDF documents.
     *
     * Now documents are stored in the file system.
     * The "defined" trick allow to keep the old behaviour if needed, to switch 
     * to the old behaviour just remove the ARCHIVED_DOCUMENTS_DIR constant in 
     * the project.conf file.
     * 
     * @access public
     * @return string 
     */
    public function getData() {
        if (!defined('ARCHIVED_DOCUMENTS_DIR')) {
            return parent::getData();    
        }
        // uncomment the @ operator if something goes wrong...
        return @file_get_contents($this->getDocumentFullPath());
    }

    // }}}
    // Document::setData() {{{

    /**
     * Override setData() to handle the new way of storing PDF documents.
     *
     * Now documents are stored in the file system.
     * The "defined" trick allow to keep the old behaviour if needed, to switch 
     * to the old behaviour just remove the ARCHIVED_DOCUMENTS_DIR constant in 
     * the project.conf file.
     * 
     * @access public
     * @param  string $data The document data.
     * @return boolean 
     */
    public function setData($data) {
        if (!defined('ARCHIVED_DOCUMENTS_DIR')) {
            return parent::setData($data);    
        }
        // uncomment the @ operator if something goes wrong...
        return @file_put_contents($this->getDocumentFullPath(), $data);
    }

    // }}}
    // Document::getDocumentFullPath() {{{

    /**
     * Returns the document absolute path.
     * The path is the concatenation of the ARCHIVED_DOCUMENTS_DIR base 
     * directory, the environment (current, prod...) and the account realm (the 
     * one used to login to the app, i.e. login@realm).
     *
     * This method is public to allow it's use in other scripts.
     * 
     * @access public
     * @return string 
     */
    public function getDocumentFullPath() {
        if (!defined('ARCHIVED_DOCUMENTS_DIR')) {
            return false;
        }
        $basedir = ARCHIVED_DOCUMENTS_DIR . DIRECTORY_SEPARATOR . ENVIRONMENT
                 . DIRECTORY_SEPARATOR . Auth::getRealm() . DIRECTORY_SEPARATOR;
        if (!is_dir($basedir)) {
            // create the dir hierarchy if it doesn't exists
            // the "true" argument is equivalent to "mkdir -p"
            mkdir($basedir, 0775, true);
        }
        $typemap = array(
            Document::TYPE_TXT => 'txt', 
            Document::TYPE_PDF => 'pdf', 
            Document::TYPE_CSV => 'csv'
        );
        $type = $this->getType();
        return $basedir . $this->getId() . 
            (isset($typemap[$type]) ? '.' . $typemap[$type] : '');
    }

    // }}}
