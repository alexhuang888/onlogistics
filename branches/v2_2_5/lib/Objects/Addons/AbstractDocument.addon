    // getLogo() {{{

    /**
     * Retourne le logo (sous forme base64), ou une string vide
     * @access public
     * @return string
     **/
    function getLogo() {
        require_once('Objects/DocumentModel.php');
        $DocumentModel = $this->GetDocumentModel();
        if (Tools::isEmptyObject($DocumentModel)) {
            return '';
        }
        $Command = $this->GetCommand();

        switch($DocumentModel->GetLogoType()) {
            case DocumentModel::EXPEDITOR:
                if (Tools::isEmptyObject($Command)) {
                    return '';
                }
                $Actor = $Command->GetExpeditor();
                break;
            case DocumentModel::DESTINATOR:
                if (Tools::isEmptyObject($Command)) {
                    return '';
                }
                $Actor = $Command->GetDestinator();
                break;
            case DocumentModel::ONE_ACTOR:
                $Actor = $DocumentModel->GetActor();
                break;
            default:
                return '';
        } // switch

        if (!Tools::isEmptyObject($Actor)) {
            $result = (is_null($Actor->GetLogo()))?'':$Actor->GetLogo();
            return $result;
        }
        return '';
    }

    // }}}
    // getFooter() {{{

    /**
     * Retourne le logo (sous forme base64), ou une string vide
     *
     * @access public
     * @return string
     */
    function getFooter() {
        $DocumentModel = $this->GetDocumentModel();
        if (Tools::isEmptyObject($DocumentModel)) {
            return '';
        }
        return $DocumentModel->GetFooter();
    }

    // }}}
    // findDocumentModel() {{{

    function findDocumentModel() {
        $docModel = $this->getDocumentModel();
        if (!Tools::isEmptyObject($docModel)) {
            return clone $docModel;  // une copie...
        }
        // On cherche d'abord si un DocumentModel est defini ds le SupplierCustomer associe
        // Sinon, on regarde si un modele par defaut est defini pour le type de document
        $DModelMapper = Mapper::singleton('DocumentModel');
        $SupplierCustomer = false;

        $Command = $this->getCommand();
        if (!Tools::isEmptyObject($Command)) {
            $SupplierCustomer = $Command->getSupplierCustomer();
        }
        elseif (method_exists($this, 'getSupplierCustomer')) {
            $SupplierCustomer = $this->getSupplierCustomer();
        }

        if (!Tools::isEmptyObject($SupplierCustomer)) {
            $DocumentModelCollection = $SupplierCustomer->getDocumentModelCollection(
                                            array('DocType' => get_class($this)));
            if (!Tools::isEmptyObject($DocumentModelCollection)) {
                $DocumentModel = $DocumentModelCollection->getItem(0);
                return $DocumentModel;
            }
        }

        /*   On regarde si un modele par defaut est defini pour le type de document  */
        $DocumentModel = $DModelMapper->load(array('DocType' => get_class($this),
                                                               'Default' => 1));
        if (!Tools::isEmptyObject($DocumentModel)) {
            return $DocumentModel;
        }
        return false;
    }

    // }}}
    // getDocumentList() {{{

    /**
     * Retourne un tableau de correspondance entre le
     * ClassName et le nom du document.
     *
     * @return array
     * @access public
     */
    function getDocumentList()
    {
        return array(
            'CommandReceipt'         => _('Command receipt'),
            'CommandReceiptSupplier' => _('Supplier order'),
            'Invoice'                => _('Invoice'),
            'Estimate'               => _('Estimate'),
            'PackingList'            => _('Packing list'),
            'ToHave'                 => _('Credit note'),
            'DeliveryOrder'          => _('Delivery order'),
            'ForwardingForm'         => _('Forwarding form')
        );
    }

    // }}}
    // getDocumentReeditionURL() {{{

    /**
     * Retourne l'url de reedition pour le document
     * de ClassName $docType ou à défaut un tableau
     * avec les correspondance ClassName => url
     *
     * @param string $docType le ClassName
     * @return string|array
     * @access public
     */
    function getDocumentReeditionURL($docType=false)
    {
        $urls = array(
            'CommandReceipt'         => 'CommandReceiptEdit.php?print=1&id=%d',
            'CommandReceiptSupplier' => 'CommandReceiptEdit.php?print=1&id=%d',
            'Invoice'                => 'EditInvoice.php?print=1&InvoiceId=%d',
            'Estimate'               => 'EstimateEdit.php?print=1&id=%d',
            'PackingList'            => 'PackingListEdit.php?reedit=1&pId=%d',
            'ToHave'                 => 'ToHaveEdit.php?reedit=1&thId=%d',
            'DeliveryOrder'          => 'DeliveryOrderEdit.php?reedit=1&idBL=%d',
            'ForwardingForm'         => 'ForwardingFormEdit.php?print=1&reedit=1&doc=%d'
        );
        return isset($urls[$docType]) ? $urls[$docType] : false;
    }
    
    // }}}
