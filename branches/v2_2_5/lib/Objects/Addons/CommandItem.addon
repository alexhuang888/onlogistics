    // handingType() {{{
    
    /**
     * CommandItem::HandingType()
     * Retourne la devise de la remise
     * 
     * @return string
     **/
    function handingType() {
        if (ereg("/", $this->getHanding())) {
            $Type = "frac";
        } elseif (ereg("%", $this->getHanding())) {
            $Type = "percent";
        } elseif (ereg("[0-9]", $this->getHanding())) {
            $Type = "currency";
        } else {
            $Type = "N/A";
        }
        return $Type;
    }

    // }}}
    // getDisplayedHanding() {{{
    
    /**
     * Le montant ou taux de la remise a afficher (soit avec % soit €, soit x/y)
     * 
     * @access public
     * @return string
     **/
    function getDisplayedHanding() {
        if ('frac' == $this->HandingType()) {
            return $this->getHanding();
        } else if ('currency' == $this->HandingType()) {
            return I18N::formatNumber($this->getHanding());
        } else if ('percent' == $this->HandingType()) {
            $Handing = substr($this->getHanding(), 0, strlen($this->getHanding())-1);
            return I18N::formatPercent($Handing);
        }
        return '';
    }

    // }}}
    // getTotalHT() {{{

    /**
     * Retourne le total HT du commanditem, cad qté fois prix HT.
     * 
     * @access public
     * @param boolean $asString si true retourne le prix sous forme de chaine
     * @return mixed float ou string 
     **/
    function getTotalHT($asString = false){
        require_once('FormatNumber.php');
        require_once("CalculatePriceHanding.php");
        $res = CalculatePriceHanding($this->HandingType(), $this->getPriceHT(), 
            $this->getQuantity(), $this->getHanding());
        $res = troncature($res);
        if (!$asString) {
            return floatval($res);
        }
        // troncature à 2 décimales
        return I18N::formatNumber($res);
    }

    // }}}
    // getTotalTTC() {{{
    
    /**
     * Retourne le total HT du commanditem, cad total HT fois TVA.
     *
     * @access public
     * @param boolean $asString si true retourne le prix sous forme de chaine
     * @return void 
     **/
    function getTotalTTC($asString = false){
        require_once('FormatNumber.php');
        $res = $this->getTotalHT();
        $tva = $this->getTVA();
        if (!Tools::isEmptyObject($tva)) {
            $res = $res + ($res * ($tva->getRate()/100));
        }
        $res = troncature($res);
        // troncature à 2 décimales
        if (!$asString) {
            return floatval($res);
        }
        return I18N::formatNumber($res);
    }

    // }}}
    // getSurface() {{{
 
    /**
     * Retourne la surface du commanditem
     *
     * @param int $qty optional: if not given the quantity is the ordered qty
     * 
     * @access public
     * @return float 
     */
    function getSurface($qty = false) {
        if ($qty === false) {
            $qty = $this->getQuantity();
        }
        return $qty * $this->getWidth() * $this->getLength();
    }

    // }}}
    // getVolume() {{{

    /**
     * Retourne le volume du commanditem
     *
     * @param int $qty optional: if not given the quantity is the ordered qty
     * 
     * @access public
     * @return float 
     */
    function getVolume($qty = false) {
        if ($qty === false) {
            $qty = $this->getQuantity();
        }
        return $qty * $this->getWidth() * $this->getLength() 
            * $this->getHeight();
    }

    // }}}
    // getRealTvaRate() {{{

    /**
     * Retourne le taux de TVA tenant eventuellement compte de la tva surtaxee
     * (Utilise au moment de la facturation uniquement)
     * @access public
     * @return float
     */
    function getRealTvaRate() {
        $tva = $this->getTVA();
        if (!($tva instanceof TVA)) {
            return 0;
        }
        $sp = $this->getCommand()->getSupplierCustomer();
        $hasTvaSurtax = ($sp instanceof SupplierCustomer && $sp->getHasTvaSurtax());
        
        $tvaSurtaxRate = ($hasTvaSurtax)?Preferences::get('TvaSurtax', 0):0;
        return $tva->getRealTvaRate($tvaSurtaxRate);
    }

    // }}}
