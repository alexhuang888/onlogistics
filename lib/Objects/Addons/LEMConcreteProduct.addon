
    /**
     * Si LEMCP annule, ou reintegre, donne la qte d'UV reintegree en stock
     *
     * @param $dateSup si renseigne, limite sup dans le temps: sert a la REedition
     * de BL, pour editer le BL initial, sans les reintegrations ulterieures
     * @access public
     * @return integer
     **/
    function getCancelledQuantity($dateSup=0) {
        require_once('Objects/MovementType.const.php');

        $Quantity = 0;
        // si le mvt n'a pas subi de reintegration / annulation,
        // et un mvt annulateur ne peut etre annule
        if (0 <= $this->getCancelled()) {
            return 0;
        }

        $MovementTypeId = Tools::getValueFromMacro($this,
                '%LocationExecutedMovement.ExecutedMovement.Type.Id%');
        $MovementType = Object::load('MovementType', $MovementTypeId);
        $LEMCPMapper = Mapper::singleton('LEMConcreteProduct');

        if ($dateSup != 0) {
            $filter = new FilterComponent();
            $filter->setItem(new FilterRule(
                    'CancelledLEMConcreteProduct',
                    FilterRule::OPERATOR_EQUALS,
                    $this->getId()));
            $filter->setItem(new FilterRule(
                    'LocationExecutedMovement.Date',
                    FilterRule::OPERATOR_LOWER_THAN_OR_EQUALS,
                    $dateSup));
            $filter->operator = FilterComponent::OPERATOR_AND;
        }
        else {
            $filter = array('CancelledLEMConcreteProduct' => $this->getId());
        }
        // Si mvt prevu (sortie normale), on ne peut annuler partiellement, avant BL
        // et 1 lemcp est annule par 1 et 1 seul lemcp
        // Reste a verifier si annule dans le creneau de dates couvert par le BL,
        // si $dateSup != 0
        if ($MovementType->getForeseeable() == 1) {
            $cancellerLEMCP = $LEMCPMapper->load($filter);
            $cancelledQty = (!Tools::isEmptyObject($cancellerLEMCP))?$this->getQuantity():0;
            return $cancelledQty;
        }

        // Remarque: si tracingMode=1, collection de 1 element au max
        $LEMCPCollection = $LEMCPMapper->loadCollection($filter);
        for ($i=0; $i<$LEMCPCollection->getCount(); $i++) {
            $LEMCP = $LEMCPCollection->getItem($i);
            $Quantity += $LEMCP->getQuantity();
        }

        return $Quantity;
    }
