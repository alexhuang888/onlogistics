    // ActorProduct::getPriceByActor() {{{

    /**
     * Retourne le prix de l'UV dans la devise de l'acteur passé en paramètre
     *
     * @access public
     * @param  $actor le client
     * @return float le prix dans la devise définie pour le client
     */
    public function getPriceByActor($actor=false)
    {
        $actor = $this->getActor();
        $currencyID = $actor->getCurrencyId();
        $zoneID     = $actor->getPricingZoneId();
        // on essaie d'abord de récupérer le prix associé à la devise *et* à la 
        // zone paramétrée de l'acteur, s'il y en a une
        if ($zoneID > 0 && $currencyID > 0) {
            $pbc = Object::load('PriceByCurrency', array(
                'ActorProduct' => $this->getId(),
                'Currency'     => $currencyID,
                'PricingZone'  => $zoneID
            ));
            if ($pbc instanceof PriceByCurrency) {
                return $pbc->getPrice();
            }
        }
        // sinon, on essaie de récupérer le prix associé à la devise
        if ($currencyID > 0) {
            $pbc = Object::load('PriceByCurrency', array(
                'ActorProduct' => $this->getId(),
                'Currency'     => $currencyID
            ));
            if ($pbc instanceof PriceByCurrency) {
                return $pbc->getPrice();
            }
        }
        return 0;
    }

    // }}}
    // ActorProduct::getUBPrice() {{{

    /**
     * Product::GetUBPrice()
     * Retourne le prix de l'unité de base du couple acteur/produit
     *
     * @param Object $actor: si renseigné le prix est dans la devise de celui-ci
     * @return float
     **/
    public function getUBPrice() {
        // on ne connait pas l'acteur donc on prend l'acteur du couple
        $product = $this->getProduct();
        $numberUBInUV = $product->GetNumberUBInUV();
        if ($numberUBInUV != 0) {
            $price = $this->GetPriceByActor();
            return round($price/$numberUBInUV, 2);
        }
        return 0;
    }

    // }}}
    // ActorProduct::getPriceByCurrencyForInventory() {{{

    /**
     * retourne le pricebycurrency correspondant à la devise du propriétaire
     * du stock, ou si non trouvé le 1er pricebycurrency défini dans une devise
     * ou bien false en dernier recours.
     *
     * @access public
     * @param object $stockOwner le propriétaire du stock de l'inventaire
     * @return mixed un objet PriceByCurrency ou false sinon
     **/
    public function getPriceByCurrencyForInventory($stockOwner){
        if (!($stockOwner instanceof Actor)) {
            return false;
        }
        $currencyID = $stockOwner->getCurrencyId();
        $zoneID     = $stockOwner->getPricingZoneId();
        // on essaie d'abord de récupérer le prix associé à la devise *et* à la 
        // zone paramétrée de l'acteur, s'il y en a une
        if ($zoneID > 0 && $currencyID > 0) {
            $pbc = Object::load('PriceByCurrency', array(
                'ActorProduct' => $this->getId(),
                'Currency'     => $currencyID,
                'PricingZone'  => $zoneID
            ));
            if ($pbc instanceof PriceByCurrency) {
                return $pbc;
            }
        }
        // sinon, on essaie de récupérer le prix associé à la devise
        if ($currencyID > 0) {
            $pbc = Object::load('PriceByCurrency', array(
                'ActorProduct' => $this->getId(),
                'Currency'     => $currencyID
            ));
            if ($pbc instanceof PriceByCurrency) {
                return $pbc;
            }
        }
        return false;
    }

    // }}}
    // ActorProduct::getCSVDataSQL() {{{

    /**
     * Retourne une requête sql pour la methode OnlogisticsXmlRpcServer::getCSVData()
     *
     * @access public
     * @return string
     */
    public function getCSVDataSQL() {
        $ret  = 'SELECT apd._Id, CONCAT(pdt._BaseReference, "-", act._Name) ';
        $ret .= 'FROM ActorProduct apd, Actor act, Product pdt ';
        $ret .= 'WHERE apd._Actor=act._Id AND apd._Product=pdt._Id';
        return $ret;
    }

    // }}}
    // ActorProduct::canBeDeleted() {{{

    /**
     * ActorProduct::canBeDeleted()
     * Retourne true si l'objet peut être détruit en base de donnees.
     * Concerne les references client:
     * Il ne faut pas qu'une commande client ait deja
     * ete passee pour ActorProduct.Product
     *
     * @access public
     * @return boolean
     */
    public function canBeDeleted() {
        $test = parent::canBeDeleted();
        $actor = $this->getActor();
        if (parent::canBeDeleted()
        && !(($actor instanceof Customer) || ($actor instanceof AeroCustomer))) {
            return true;
        }
        // C'est bien une occurrence pour stocker une ref client
        // Au vu du path, pas possible d'utiliser $mapper->alreadyExists()
        $mapper = Mapper::singleton('ProductCommandItem');
        $testColl = $mapper->loadCollection(
                array(
                    'Command.Destinator' => $this->getActorId(),
                    'Product '=> $this->getProductId()));

        if ($testColl->getCount() > 0) {
            throw new Exception('A customer command already exists with this customer and this product.');
        }
        return true;
    }

    // }}}
    // ActorProduct::getToStringAttribute() {{{

    /**
     * Retourne le nom des attributs utilisÃ©s par la mÃ©thode toString()

     * @access public
     * @return array
     */
    function getToStringAttribute() {
        return array('Actor', 'AssociatedProductReference');
    }

    // }}}
    // ActorProduct::toString() {{{

    /**
     * Retourne la representation textuelle de l'ActorProduct

     * @access public
     * @return string
     */
    function toString() {
        $ret  = $this->getAssociatedProductReference();
        if (($actor = $this->getActor()) instanceof Actor) {
            $ret .= ' / ' . $actor->getName();
        }
        return $ret;
    }

    // }}}
